ğŸ”¹ 1. Single Number
ğŸ§  Easy intro to XOR
Given a non-empty array of integers, every element appears twice except for one. Find that single one.
ğŸ“Œ Leetcode 136 â€“ Single Number

ğŸ”¹ 2. Number of 1 Bits (Popcount)
ğŸ§  Practice x & (x - 1)
Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).
ğŸ“Œ Leetcode 191 â€“ Number of 1 Bits

ğŸ”¹ 3. Counting Bits
ğŸ§  Bitwise dynamic programming
Given an integer n, return an array ans of length n + 1 such that for each i (0 â‰¤ i â‰¤ n), ans[i] is the number of 1's in the binary representation of i.
ğŸ“Œ Leetcode 338 â€“ Counting Bits

ğŸ”¹ 4. Subset Generation using Bitmask
ğŸ§  Full enumeration via bitmasking
Generate all subsets (the power set) of a set of numbers.
ğŸ“Œ Leetcode 78 â€“ Subsets
ğŸ’¡ Recommended: Avoid recursion; implement using bitmasking.

ğŸ”¹ 5. Find the Duplicate Number (No Extra Space)
ğŸ§  XOR or bit-level tricks at max difficulty
ğŸ“Œ Leetcode 287 â€“ Find the Duplicate Number

ğŸ”¹ 6. Missing Number
ğŸ§  XOR or arithmetic sum
Find the missing number in a list containing n distinct numbers taken from 0 to n.
ğŸ“Œ Leetcode 268 â€“ Missing Number

ğŸ”¹ 7. Reverse Bits
ğŸ§  Bit juggling
ğŸ“Œ Leetcode 190 â€“ Reverse Bits

ğŸ”¹ 8. Maximum XOR of Two Numbers in an Array
ğŸ§  High-end bit manipulation â€” often asked in FAANG
ğŸ“Œ Leetcode 421 â€“ Maximum XOR of Two Numbers in an Array
